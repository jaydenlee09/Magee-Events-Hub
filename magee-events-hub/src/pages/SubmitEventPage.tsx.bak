import React, { useState } from "react";
import { db } from "../firebase/firebase";
import { collection, addDoc } from "firebase/firestore";
import { Calendar, PartyPopper, Trophy, BookOpen, Users, Music, Palette, Pizza, GraduationCap, Building2, Send, Handshake, Tv2, CheckCircle, AlertCircle, Clock, MapPin, User, Mail, FileText } from "lucide-react";
import PageFade from '../PageFade';
import SuccessAnimation from '../components/SuccessAnimation';
import AnimatedBackground from "../components/AnimatedBackground";

interface FormData {
  title: string;
  description: string;
  category: string;
  date: string;
  time: string;
  timePeriod: string;
  location: string;
  organizer: string;
  targetAudience: string;
  email: string;
  notes: string;
  icon: string;
}

const iconOptions = [
  { name: "Calendar", icon: <Calendar /> },
  { name: "PartyPopper", icon: <PartyPopper /> },
  { name: "Trophy", icon: <Trophy /> },
  { name: "BookOpen", icon: <BookOpen /> },
  { name: "Users", icon: <Users /> },
  { name: "Music", icon: <Music /> },
  { name: "Palette", icon: <Palette /> },
  { name: "Pizza", icon: <Pizza /> },
  { name: "GraduationCap", icon: <GraduationCap /> },
  { name: "Building2", icon: <Building2 /> },
  { name: "Handshake", icon: <Handshake /> },
  { name: "Tv2", icon: <Tv2 /> },
];

const categoryOptions = [
  { value: "Academic", label: "Academic", icon: "📚", color: "from-blue-500 to-blue-600", glowColor: "blue", ringColor: "ring-blue-300", darkRingColor: "dark:ring-blue-600" },
  { value: "Sports", label: "Sports", icon: "⚽", color: "from-green-500 to-green-600", glowColor: "green", ringColor: "ring-green-300", darkRingColor: "dark:ring-green-600" },
  { value: "Cultural", label: "Cultural", icon: "🎭", color: "from-purple-500 to-purple-600", glowColor: "purple", ringColor: "ring-purple-300", darkRingColor: "dark:ring-purple-600" },
  { value: "Social", label: "Social", icon: "🎉", color: "from-pink-500 to-pink-600", glowColor: "pink", ringColor: "ring-pink-300", darkRingColor: "dark:ring-pink-600" },
  { value: "Spirit Day", label: "Spirit Day", icon: "🎨", color: "from-orange-500 to-orange-600", glowColor: "orange", ringColor: "ring-orange-300", darkRingColor: "dark:ring-orange-600" },
  { value: "Club Event", label: "Club Event", icon: "🏛️", color: "from-indigo-500 to-indigo-600", glowColor: "indigo", ringColor: "ring-indigo-300", darkRingColor: "dark:ring-indigo-600" },
  { value: "Other", label: "Other", icon: "✨", color: "from-gray-500 to-gray-600", glowColor: "gray", ringColor: "ring-gray-300", darkRingColor: "dark:ring-gray-600" },
];

import AuthCheck from '../components/AuthCheck';
import { auth, signOutUser } from '../firebase/firebase';
import { useAuthState } from 'react-firebase-hooks/auth';
import { LogOut } from 'lucide-react';

const SubmitEventPage: React.FC = () => {
  const [user] = useAuthState(auth);
  const [formData, setFormData] = useState<FormData>({
    title: "",
    description: "",
    category: "",
    date: "",
    time: "",
    timePeriod: "AM",
    location: "",
    organizer: "",
    targetAudience: "",
    email: user?.email || "",
    notes: "",
    icon: "Calendar"
  });
  const [customTargetAudience, setCustomTargetAudience] = useState("");
  const [isOtherSelected, setIsOtherSelected] = useState(false);
  const [currentStep, setCurrentStep] = useState(1);
  const [errors, setErrors] = useState<Partial<FormData>>({});
  const [stepErrors, setStepErrors] = useState<{[key: number]: Partial<FormData>}>({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [showSuccessModal, setShowSuccessModal] = useState(false);

  // Update email when user data becomes available
  React.useEffect(() => {
    if (user?.email) {
      setFormData(prev => ({ ...prev, email: user.email || "" }));
    }
  }, [user]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
    if (errors[name as keyof FormData]) {
      setErrors({ ...errors, [name]: "" });
    }
    // Clear step errors for the current field
    if (stepErrors[currentStep]?.[name as keyof FormData]) {
      setStepErrors(prev => ({
        ...prev,
        [currentStep]: {
          ...prev[currentStep],
          [name]: ""
        }
      }));
    }
  };

  const handleIconSelect = (iconName: string) => {
    setFormData({ ...formData, icon: iconName });
  };

  const validateStep = (step: number): boolean => {
    const newErrors: Partial<FormData> = {};
    
    switch (step) {
      case 1:
        if (!formData.title.trim()) newErrors.title = "Event title is required";
        if (!formData.description.trim()) newErrors.description = "Description is required";
        if (!formData.category) newErrors.category = "Please select a category";
        if (!formData.icon) newErrors.icon = "Please select an icon";
        break;
        
      case 2:
        if (!formData.date) newErrors.date = "Event date is required";
        else if (new Date(formData.date) < new Date()) {
          newErrors.date = "Event date cannot be in the past";
        }
        
        if (!formData.time) newErrors.time = "Start time is required";
        else if (!/^(0[1-9]|1[0-2]):[0-5][0-9]$/.test(formData.time)) {
          newErrors.time = "Enter time in hh:mm 12-hour format (e.g., 09:30)";
        }
        
        if (!formData.location.trim()) newErrors.location = "Location is required";
        if (!formData.targetAudience) newErrors.targetAudience = "Target audience is required";
        break;
        
      case 3:
        if (!formData.organizer.trim()) newErrors.organizer = "Organizer name is required";
        
        if (formData.email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
          newErrors.email = "Please enter a valid email address";
        }
        break;
    }
    
    setStepErrors(prev => ({ ...prev, [step]: newErrors }));
    return Object.keys(newErrors).length === 0;
  };

  const validateForm = (): boolean => {
    const newErrors: Partial<FormData> = {};
    
    if (!formData.title.trim()) newErrors.title = "Event title is required";
    if (!formData.description.trim()) newErrors.description = "Description is required";
    if (!formData.category) newErrors.category = "Please select a category";
    if (!formData.date) newErrors.date = "Event date is required";
    if (!formData.time) newErrors.time = "Start time is required";
    else if (!/^(0[1-9]|1[0-2]):[0-5][0-9]$/.test(formData.time)) newErrors.time = "Enter time in hh:mm 12-hour format";
    if (!formData.location.trim()) newErrors.location = "Location is required";
    if (!formData.organizer.trim()) newErrors.organizer = "Organizer name is required";
    if (!formData.targetAudience) newErrors.targetAudience = "Target audience is required";
    
    if (formData.date && new Date(formData.date) < new Date()) {
      newErrors.date = "Event date cannot be in the past";
    }
    
    if (formData.email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
      newErrors.email = "Please enter a valid email address";
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    console.log("Submit button clicked!");
    console.log("Form data:", formData);
    console.log("Step validation:", getStepValidation(3));
    
    if (!validateForm()) return;
    
    setIsSubmitting(true);
    
    try {
      // Ensure the time format is valid before saving
      let timeString = "";
      if (formData.time && formData.timePeriod) {
        // Make sure minutes are included
        let timeValue = formData.time;
        if (!timeValue.includes(':')) {
          timeValue = `${timeValue}:00`;
        } else if (timeValue.endsWith(':')) {
          timeValue = `${timeValue}00`;
        }
        
        // Add the AM/PM period
        timeString = `${timeValue} ${formData.timePeriod}`;
      }
      
      await addDoc(collection(db, "pendingEvents"), {
        ...formData,
        time: timeString,
        submittedAt: new Date(),
      });
      setShowSuccessModal(true);
      setFormData({
        title: "",
        description: "",
        category: "",
        date: "",
        time: "",
        timePeriod: "AM",
        location: "",
        organizer: "",
        targetAudience: "",
        email: "",
        notes: "",
        icon: "Calendar"
      });
      setCustomTargetAudience("");
      setIsOtherSelected(false);
      setCurrentStep(1);
    } catch (error) {
      console.error("Failed to submit:", error);
      alert("Failed to submit. Please try again.");
    } finally {
      setIsSubmitting(false);
    }
  };

  const nextStep = () => {
    if (validateStep(currentStep)) {
      if (currentStep < 3) setCurrentStep(currentStep + 1);
    }
  };

  const prevStep = () => {
    if (currentStep > 1) setCurrentStep(currentStep - 1);
  };

  const getProgressPercentage = () => {
    return (currentStep / 3) * 100;
  };

  const getStepValidation = (step: number) => {
    // Check if the step has any errors
    const stepError = stepErrors[step];
    if (stepError && Object.keys(stepError).length > 0) {
      return false;
    }
    
    switch (step) {
      case 1:
        return formData.title.trim() && formData.description.trim() && formData.category && formData.icon;
      case 2:
        return formData.date && formData.time && formData.location.trim() && formData.targetAudience &&
               new Date(formData.date) >= new Date() && 
               /^(0[1-9]|1[0-2]):[0-5][0-9]$/.test(formData.time);
      case 3:
        return formData.organizer.trim();
      default:
        return false;
    }
  };

  const getFieldError = (fieldName: keyof FormData, step: number) => {
    return stepErrors[step]?.[fieldName] || errors[fieldName];
  };

  return (
    <>
      <AuthCheck>
        <AnimatedBackground />
        <PageFade />
        
        {/* Beautiful Success Animation */}
        <SuccessAnimation 
          isVisible={showSuccessModal}
          onComplete={() => setShowSuccessModal(false)}
        />
      
      <div className={`min-h-screen px-4 sm:px-6 py-4 sm:py-6 relative overflow-hidden bg-transparent z-10 ${
        typeof window !== 'undefined' && document.documentElement.classList.contains('dark')
          ? 'animate-fadeIn-dark'
          : 'animate-fadeIn'
      }`}>
        {/* Subtle Grid Pattern */}
        <div className="absolute inset-0 pointer-events-none">
          <div className="absolute inset-0 bg-[radial-gradient(circle_at_1px_1px,rgba(0,0,0,0.08)_1px,transparent_0)] bg-[length:20px_20px] dark:bg-[radial-gradient(circle_at_1px_1px,rgba(255,255,255,0.08)_1px,transparent_0)]"></div>
        </div>
        
        {/* Red Glow Effect - Dark Mode Only */}
        <div className="absolute inset-0 pointer-events-none dark:block hidden">
          <div
            className="absolute inset-0 z-0"
            style={{
              backgroundImage: `
                radial-gradient(circle at 50% 140%, rgba(110, 70, 70, 0.5) 0%, transparent 60%),
                radial-gradient(circle at 50% 140%, rgba(241, 99, 99, 0.4) 0%, transparent 70%),
                radial-gradient(circle at 50% 140%, rgba(208, 181, 181, 0.3) 0%, transparent 80%)
              `,
            }}
          />
        </div>
        
        <div className="max-w-5xl mx-auto relative z-10">
          {/* Enhanced Header */}
          <div className="text-center mb-8 sm:mb-12 pt-16 sm:pt-20">
            <div className="flex items-center justify-center gap-3 mb-4">
              <span className="inline-flex items-center px-4 py-2 rounded-full bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 text-sm">
                <span className="w-2 h-2 mr-2 rounded-full bg-green-500"></span>
                Signed in as: {user?.email}
              </span>
              <button
                onClick={() => signOutUser()}
                className="inline-flex items-center px-4 py-2 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 text-sm font-medium hover:bg-gray-200 dark:hover:bg-gray-700 transition-all duration-300 border border-gray-200 dark:border-gray-700"
              >
                <LogOut className="w-4 h-4 mr-2" />
                Sign Out
              </button>
            </div>
            <h1 className="text-3xl sm:text-4xl md:text-5xl font-bold text-gray-900 dark:text-white mb-3 sm:mb-4 tracking-tight">
              Submit New Event
            </h1>
            <p className="text-base sm:text-lg md:text-xl text-gray-600 dark:text-gray-300 max-w-2xl mx-auto leading-relaxed px-4">
              Share your event with the Magee community and help create amazing experiences for everyone!
            </p>
          </div>

          {/* Enhanced Progress Bar */}
          <div className="mb-8 sm:mb-10 md:mb-12">
            <div className="flex items-center justify-between mb-3 sm:mb-4 md:mb-5 mx-auto max-w-3xl px-4 sm:px-6">
              {[1, 2, 3].map((step) => {
                const stepLabels = ["Basic Information", "Date & Location", "Organizer Details"];
                const isActive = currentStep >= step;
                const isComplete = getStepValidation(step);
                
                return (
                <div key={step} className="flex flex-col items-center relative">
                  <div className={`w-8 h-8 sm:w-10 sm:h-10 md:w-12 md:h-12 rounded-full flex items-center justify-center text-sm sm:text-base font-bold transition-all duration-500 ${
                    isComplete 
                      ? 'bg-gradient-to-br from-green-500 to-green-600 text-white shadow-lg shadow-green-500/30 scale-110' 
                      : isActive
                        ? 'bg-gradient-to-br from-red-500 to-red-600 text-white shadow-lg shadow-red-500/30 scale-110'
                        : 'bg-gray-100 dark:bg-gray-700 text-gray-500 border-2 border-gray-200 dark:border-gray-600'
                  }`}>
                    {isComplete ? 
                      <CheckCircle className="w-4 h-4 sm:w-5 sm:h-5 md:w-6 md:h-6" /> : 
                      step
                    }
                  </div>
                  
                  <span className={`mt-2 text-xs sm:text-sm font-medium transition-all duration-300 ${
                    isActive ? 'text-gray-900 dark:text-white' : 'text-gray-500 dark:text-gray-400'
                  }`}>
                    {stepLabels[step-1]}
                  </span>
                  
                  {step < 3 && (
                    <div className={`absolute top-4 sm:top-5 md:top-6 left-full w-full h-1 transform -translate-x-1/2 ${
                      currentStep > step 
                        ? 'bg-gradient-to-r from-red-500 to-red-600' 
                        : 'bg-gray-200 dark:bg-gray-700'
                    }`} style={{ width: 'calc(100% - 3rem)' }}></div>
                  )}
                </div>
              )})}
            </div>
            
            <div className="w-full bg-gray-100 dark:bg-gray-700 rounded-full h-1.5 sm:h-2.5 overflow-hidden shadow-inner max-w-3xl mx-auto">
              <div 
                className="bg-gradient-to-r from-red-400 to-red-600 h-full rounded-full transition-all duration-700 ease-out-expo shadow-lg"
                style={{ 
                  width: `${getProgressPercentage()}%`,
                  filter: 'drop-shadow(0 0 6px rgba(239, 68, 68, 0.5))'
                }}
              ></div>
            </div>
          </div>

          {/* Enhanced Form Container */}
          <div className="bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm rounded-2xl sm:rounded-3xl shadow-2xl border border-gray-100/50 dark:border-gray-700/50 overflow-hidden">
            <form onSubmit={handleSubmit} className="p-4 sm:p-6 md:p-8 lg:p-12">
              
              {/* Step 1: Basic Information */}
              {currentStep === 1 && (
                <div className="space-y-10">
                  <div className="text-center relative mb-10">
                    <div className="absolute left-0 right-0 top-1/2 transform -translate-y-1/2 h-px bg-gradient-to-r from-transparent via-gray-300 dark:via-gray-600 to-transparent"></div>
                    <div className="inline-block relative px-6 py-3 bg-white dark:bg-gray-800 rounded-full shadow-sm">
                      <h2 className="text-2xl sm:text-3xl font-bold bg-gradient-to-r from-red-500 to-red-600 bg-clip-text text-transparent mb-1">Basic Information</h2>
                      <p className="text-gray-600 dark:text-gray-300 text-sm sm:text-base">Let's start with the essentials</p>
                    </div>
                  </div>
                
                  {/* Enhanced Icon Selection */}
                  <div className="bg-gradient-to-br from-red-50 to-gray-50 dark:from-gray-800/50 dark:to-gray-900/50 rounded-2xl p-6 sm:p-8 border border-gray-100 dark:border-gray-700 shadow-inner">
                    <label className="block text-lg sm:text-xl font-bold text-gray-800 dark:text-gray-200 mb-6 text-center">Choose Event Icon</label>
                    <div className="grid grid-cols-4 sm:grid-cols-6 gap-4 sm:gap-5 max-w-2xl mx-auto">
                      {iconOptions.map(opt => (
                        <button
                          type="button"
                          key={opt.name}
                          className={`group aspect-square w-14 h-14 sm:w-16 sm:h-16 md:w-18 md:h-18 p-2 sm:p-3 rounded-2xl border-2 transition-all duration-300 focus:outline-none focus:ring-4 focus:ring-red-200 dark:focus:ring-red-800 hover:scale-110 flex items-center justify-center ${
                            formData.icon === opt.name 
                              ? 'border-red-500 bg-gradient-to-br from-red-500 to-red-600 text-white scale-110 shadow-xl' 
                              : 'border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 hover:border-red-300 hover:bg-red-50 dark:hover:bg-red-900/20'
                          }`}
                          onClick={() => handleIconSelect(opt.name)}
                        >
                          <div className={`text-xl sm:text-2xl md:text-3xl transition-all duration-300 ${
                            formData.icon === opt.name 
                              ? 'text-white group-hover:text-white transform scale-125' 
                              : 'text-gray-700 dark:text-gray-200 group-hover:text-red-600 dark:group-hover:text-red-400'
                          }`}>
                            {opt.icon}
                          </div>
                        </button>
                      ))}
                    </div>
                    {getFieldError('icon', 1) && (
                      <div className="flex items-center justify-center gap-2 mt-4 text-red-600 bg-red-50 dark:bg-red-900/20 p-2 rounded-lg">
                        <AlertCircle className="w-5 h-5 flex-shrink-0" />
                        <span className="text-sm font-medium">{getFieldError('icon', 1)}</span>
                      </div>
                    )}
                  </div>

                  {/* Title with Floating Label */}
                  <div className="bg-white dark:bg-gray-800 rounded-2xl shadow-sm border border-gray-100 dark:border-gray-700 overflow-hidden">
                    <div className="p-1">
                      <div className="relative">
                        <input
                          type="text"
                          id="event-title"
                          name="title"
                          value={formData.title}
                          onChange={handleChange}
                          placeholder=" "
                          className={`w-full px-5 sm:px-6 pt-6 pb-2 peer border-0 text-gray-700 dark:text-gray-100 transition-all duration-300 focus:outline-none focus:ring-0 font-sans text-base sm:text-lg bg-white dark:bg-gray-800 ${
                            getFieldError('title', 1) ? 'text-red-500 dark:text-red-400' : ''
                          }`}
                        />
                        <label 
                          htmlFor="event-title"
                          className="absolute top-2 left-5 sm:left-6 text-xs font-bold uppercase tracking-wider text-red-500 dark:text-red-400 peer-placeholder-shown:text-base peer-placeholder-shown:text-gray-400 dark:peer-placeholder-shown:text-gray-500 peer-placeholder-shown:top-1/2 peer-placeholder-shown:-translate-y-1/2 peer-placeholder-shown:uppercase-none peer-placeholder-shown:tracking-normal peer-focus:top-2 peer-focus:text-xs peer-focus:text-red-500 dark:peer-focus:text-red-400 peer-focus:font-bold peer-focus:uppercase peer-focus:tracking-wider transition-all duration-200"
                        >
                          Event Title *
                        </label>
                        <FileText className="absolute right-5 top-1/2 transform -translate-y-1/2 text-gray-400 dark:text-gray-500 w-5 h-5" />
                      </div>
                    </div>
                    {getFieldError('title', 1) && (
                      <div className="flex items-center gap-2 p-2 px-6 bg-red-50 dark:bg-red-900/20 border-t border-red-100 dark:border-red-800">
                        <AlertCircle className="w-4 h-4 text-red-500 flex-shrink-0" />
                        <span className="text-sm text-red-600 dark:text-red-400">{getFieldError('title', 1)}</span>
                      </div>
                    )}
                  </div>
                  
                  {/* Enhanced Description */}
                  <div className="bg-white dark:bg-gray-800 rounded-2xl shadow-sm border border-gray-100 dark:border-gray-700 overflow-hidden">
                    <div className="p-1">
                      <div className="relative">
                        <textarea
                          id="event-description"
                          name="description"
                          value={formData.description}
                          onChange={handleChange}
                          rows={4}
                          placeholder=" "
                          className={`w-full px-5 sm:px-6 pt-8 pb-3 peer border-0 text-gray-700 dark:text-gray-100 transition-all duration-300 focus:outline-none focus:ring-0 font-sans text-base resize-none bg-white dark:bg-gray-800 ${
                            getFieldError('description', 1) ? 'text-red-500 dark:text-red-400' : ''
                          }`}
                        />
                        <label 
                          htmlFor="event-description"
                          className="absolute top-2 left-5 sm:left-6 text-xs font-bold uppercase tracking-wider text-red-500 dark:text-red-400 peer-placeholder-shown:text-base peer-placeholder-shown:text-gray-400 dark:peer-placeholder-shown:text-gray-500 peer-placeholder-shown:top-6 peer-placeholder-shown:uppercase-none peer-placeholder-shown:tracking-normal peer-focus:top-2 peer-focus:text-xs peer-focus:text-red-500 dark:peer-focus:text-red-400 peer-focus:font-bold peer-focus:uppercase peer-focus:tracking-wider transition-all duration-200"
                        >
                          Description *
                        </label>
                      </div>
                    </div>
                    {getFieldError('description', 1) && (
                      <div className="flex items-center gap-2 p-2 px-6 bg-red-50 dark:bg-red-900/20 border-t border-red-100 dark:border-red-800">
                        <AlertCircle className="w-4 h-4 text-red-500 flex-shrink-0" />
                        <span className="text-sm text-red-600 dark:text-red-400">{getFieldError('description', 1)}</span>
                      </div>
                    )}
                  </div>
                  
                  {/* Enhanced Category Selection */}
                  <div className="bg-gradient-to-br from-red-50 to-gray-50 dark:from-gray-800/50 dark:to-gray-900/50 rounded-2xl p-6 sm:p-8 border border-gray-100 dark:border-gray-700 shadow-inner">
                    <label className="block text-lg sm:text-xl font-bold text-gray-800 dark:text-gray-200 mb-6 text-center">Category *</label>
                    <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-3 sm:gap-4 max-w-3xl mx-auto">
                      {categoryOptions.map(cat => (
                        <button
                          type="button"
                          key={cat.value}
                          className={`p-3 sm:p-4 md:p-5 rounded-xl sm:rounded-2xl border-2 transition-all duration-300 focus:outline-none hover:scale-105 flex items-center gap-2 sm:gap-3 md:gap-4 ${
                            formData.category === cat.value 
                              ? `bg-gradient-to-br ${cat.color} text-white shadow-xl shadow-${cat.glowColor}-500/50 border-${cat.glowColor}-400 dark:border-white ring-2 ${cat.ringColor} ${cat.darkRingColor}` 
                              : `bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700 hover:border-${cat.glowColor}-300 dark:hover:border-${cat.glowColor}-700 hover:shadow-lg group`
                          }`}
                          onClick={() => setFormData({ ...formData, category: cat.value })}
                        >
                          <div className={`w-10 h-10 flex items-center justify-center rounded-full transition-all duration-300 ${
                            formData.category === cat.value 
                              ? `bg-white/20 text-white` 
                              : `bg-gradient-to-br ${cat.color} text-white group-hover:scale-110`
                          }`}>
                            <span className="text-xl sm:text-2xl">{cat.icon}</span>
                          </div>
                          <span className={`font-semibold text-sm sm:text-base flex-1 text-center transition-colors duration-300 ${
                            formData.category === cat.value 
                              ? 'text-white' 
                              : `text-gray-700 dark:text-gray-200 group-hover:text-${cat.glowColor}-600 dark:group-hover:text-${cat.glowColor}-400`
                          }`}>
                            {cat.label}
                          </span>
                        </button>
                      ))}
                    </div>
                    {getFieldError('category', 1) && (
                      <div className="flex items-center justify-center gap-2 mt-4 text-red-600 bg-red-50 dark:bg-red-900/20 p-2 rounded-lg">
                        <AlertCircle className="w-5 h-5 flex-shrink-0" />
                        <span className="text-sm font-medium">{getFieldError('category', 1)}</span>
                      </div>
                    )}
                  </div>

                  <div className="flex justify-center pt-6">
                    <button
                      type="button"
                      onClick={nextStep}
                      disabled={!getStepValidation(1)}
                      className="px-8 sm:px-10 py-4 sm:py-5 rounded-xl sm:rounded-2xl bg-gradient-to-r from-red-500 to-red-600 text-white font-semibold shadow-xl shadow-red-500/30 transition-all duration-300 hover:from-red-600 hover:to-red-700 hover:shadow-red-500/50 hover:scale-105 focus:outline-none focus:ring-4 focus:ring-red-300 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100 disabled:shadow-none text-base sm:text-lg relative overflow-hidden group"
                    >
                      <span className="relative z-10 flex items-center justify-center gap-2">
                        Next Step
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 transition-transform duration-300 transform group-hover:translate-x-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                        </svg>
                      </span>
                      <div className="absolute inset-0 h-full w-full bg-gradient-to-r from-red-600 to-red-700 transform scale-x-0 origin-left group-hover:scale-x-100 transition-transform duration-500"></div>
                    </button>
                  </div>
                </div>
              )}

              {/* Step 2: Date & Time */}
              {currentStep === 2 && (
                <div className="space-y-10">
                  <div className="text-center relative mb-10">
                    <div className="absolute left-0 right-0 top-1/2 transform -translate-y-1/2 h-px bg-gradient-to-r from-transparent via-gray-300 dark:via-gray-600 to-transparent"></div>
                    <div className="inline-block relative px-6 py-3 bg-white dark:bg-gray-800 rounded-full shadow-sm">
                      <h2 className="text-2xl sm:text-3xl font-bold bg-gradient-to-r from-red-500 to-red-600 bg-clip-text text-transparent mb-1">When & Where</h2>
                      <p className="text-gray-600 dark:text-gray-300 text-sm sm:text-base">Set the date, time, and location</p>
                    </div>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                    {/* Date Field with Enhanced Style - Fixed Calendar Icon */}
                    <div className="bg-white dark:bg-gray-800 rounded-2xl shadow-sm border border-gray-100 dark:border-gray-700 overflow-hidden">
                      <div className="p-1">
                        <div className="relative">
                          <input
                            type="text" 
                            id="event-date"
                            name="date"
                            value={formData.date ? formData.date : ''}
                            onChange={(e) => {
                              // Handle the date value change with standard handleChange
                              handleChange(e);
                            }}
                            onFocus={(e) => {
                              const input = e.target as HTMLInputElement;
                              input.type = 'date';
                              // Add a slight delay to ensure the type change takes effect before showing picker
                              setTimeout(() => {
                                if ('showPicker' in input) {
                                  input.showPicker();
                                }
                              }, 10);
                            }}
                            onBlur={(e) => {
                              // Only change back to text if empty
                              if (!e.target.value) {
                                (e.target as HTMLInputElement).type = 'text';
                              }
                            }}
                            className={`w-full px-5 sm:px-6 pt-8 pb-3 peer border-0 text-gray-700 dark:text-gray-100 transition-all duration-300 focus:outline-none focus:ring-0 font-sans text-lg bg-white dark:bg-gray-800 [&::-webkit-calendar-picker-indicator]:opacity-0 ${
                              getFieldError('date', 2) ? 'text-red-500 dark:text-red-400' : ''
                            }`}
                            placeholder=" "
                          />
                          <label 
                            htmlFor="event-date"
                            className="absolute top-2 left-5 sm:left-6 text-xs font-bold uppercase tracking-wider text-red-500 dark:text-red-400 peer-placeholder-shown:text-base peer-placeholder-shown:text-gray-400 dark:peer-placeholder-shown:text-gray-500 peer-placeholder-shown:top-6 peer-placeholder-shown:uppercase-none peer-placeholder-shown:tracking-normal peer-focus:top-2 peer-focus:text-xs peer-focus:text-red-500 dark:peer-focus:text-red-400 peer-focus:font-bold peer-focus:uppercase peer-focus:tracking-wider transition-all duration-200"
                          >
                            Event Date *
                          </label>
                          <div 
                            className="absolute right-5 top-1/2 transform -translate-y-1/2 text-gray-400 dark:text-gray-500 cursor-pointer"
                            onClick={() => {
                              const dateInput = document.getElementById('event-date') as HTMLInputElement;
                              if (dateInput) {
                                dateInput.focus();
                                // Convert to date type if needed
                                if (dateInput.type !== 'date') {
                                  dateInput.type = 'date';
                                }
                                // Open the date picker if supported by the browser
                                if ('showPicker' in dateInput) {
                                  dateInput.showPicker();
                                }
                              }
                            }}
                          >
                            <Calendar className="w-5 h-5" />
                          </div>
                        </div>
                      </div>
                      {getFieldError('date', 2) && (
                        <div className="flex items-center gap-2 p-2 px-6 bg-red-50 dark:bg-red-900/20 border-t border-red-100 dark:border-red-800">
                          <AlertCircle className="w-4 h-4 text-red-500 flex-shrink-0" />
                          <span className="text-sm text-red-600 dark:text-red-400">{getFieldError('date', 2)}</span>
                        </div>
                      )}
                    </div>

                    {/* Time Input with Enhanced Style */}
                    <div>
                      <div className="bg-white dark:bg-gray-800 rounded-2xl shadow-sm border border-gray-100 dark:border-gray-700 overflow-hidden mb-3">
                        <div className="p-1">
                          <div className="relative">
                            <input
                              type="text"
                              id="event-time"
                              name="time"
                              value={formData.time}
                              onChange={e => {
                                const val = e.target.value.replace(/[^0-9:]/g, '').slice(0, 5);
                                setFormData({ ...formData, time: val });
                              }}
                              placeholder=" "
                              className={`w-full px-5 sm:px-6 pt-8 pb-3 peer border-0 text-gray-700 dark:text-gray-100 transition-all duration-300 focus:outline-none focus:ring-0 font-sans text-lg bg-white dark:bg-gray-800 ${
                                getFieldError('time', 2) ? 'text-red-500 dark:text-red-400' : ''
                              }`}
                              pattern="^(0[1-9]|1[0-2]):[0-5][0-9]$"
                              autoComplete="off"
                            />
                            <label 
                              htmlFor="event-time"
                              className="absolute top-2 left-5 sm:left-6 text-xs font-bold uppercase tracking-wider text-red-500 dark:text-red-400 peer-placeholder-shown:text-base peer-placeholder-shown:text-gray-400 dark:peer-placeholder-shown:text-gray-500 peer-placeholder-shown:top-6 peer-placeholder-shown:uppercase-none peer-placeholder-shown:tracking-normal peer-focus:top-2 peer-focus:text-xs peer-focus:text-red-500 dark:peer-focus:text-red-400 peer-focus:font-bold peer-focus:uppercase peer-focus:tracking-wider transition-all duration-200"
                            >
                              Start Time * <span className="font-normal lowercase normal-case text-gray-400 dark:text-gray-500 text-xs">(e.g., 09:30, 2:45)</span>
                            </label>
                            <Clock className="absolute right-5 top-6 transform text-gray-400 dark:text-gray-500 w-5 h-5" />
                          </div>
                        </div>
                        {getFieldError('time', 2) && (
                          <div className="flex items-center gap-2 p-2 px-6 bg-red-50 dark:bg-red-900/20 border-t border-red-100 dark:border-red-800">
                            <AlertCircle className="w-4 h-4 text-red-500 flex-shrink-0" />
                            <span className="text-sm text-red-600 dark:text-red-400">{getFieldError('time', 2)}</span>
                          </div>
                        )}
                      </div>
                      
                      {/* AM/PM Selector with Enhanced Style */}
                      <div className="flex gap-3 justify-center">
                        {['AM', 'PM'].map(period => (
                          <button
                            type="button"
                            key={period}
                            className={`px-6 py-3 rounded-xl font-semibold border-2 transition-all duration-300 focus:outline-none focus:ring-4 focus:ring-red-200 text-base flex-1 ${
                              formData.timePeriod === period 
                                ? 'bg-gradient-to-r from-red-500 to-red-600 text-white border-red-500 shadow-lg scale-105' 
                                : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-200 border-gray-200 dark:border-gray-700 hover:border-red-300 hover:bg-red-50 dark:hover:bg-red-900/20'
                            }`}
                            onClick={() => setFormData({ ...formData, timePeriod: period })}
                          >
                            {period}
                          </button>
                        ))}
                      </div>
                    </div>

                    {/* Enhanced Location Field */}
                    <div className="md:col-span-2 bg-gradient-to-br from-red-50 to-gray-50 dark:from-gray-800/50 dark:to-gray-900/50 rounded-2xl p-6 sm:p-8 border border-gray-100 dark:border-gray-700 shadow-inner">
                      <label className="block text-lg sm:text-xl font-bold text-gray-800 dark:text-gray-200 mb-6 text-center">Location *</label>
                      <div className="relative max-w-2xl mx-auto">
                        <div className="bg-white dark:bg-gray-800 rounded-2xl shadow-sm border border-gray-100 dark:border-gray-700 overflow-hidden">
                          <div className="p-1">
                            <div className="relative">
                              <input
                                type="text"
                                id="event-location"
                                name="location"
                                value={formData.location}
                                onChange={handleChange}
                                placeholder=" "
                                className={`w-full px-5 sm:px-6 pt-8 pb-3 peer border-0 text-gray-700 dark:text-gray-100 transition-all duration-300 focus:outline-none focus:ring-0 font-sans text-lg bg-white dark:bg-gray-800 ${
                                  getFieldError('location', 2) ? 'text-red-500 dark:text-red-400' : ''
                                }`}
                              />
                              <label 
                                htmlFor="event-location"
                                className="absolute top-2 left-5 sm:left-6 text-xs font-bold uppercase tracking-wider text-red-500 dark:text-red-400 peer-placeholder-shown:text-base peer-placeholder-shown:text-gray-400 dark:peer-placeholder-shown:text-gray-500 peer-placeholder-shown:top-6 peer-placeholder-shown:uppercase-none peer-placeholder-shown:tracking-normal peer-focus:top-2 peer-focus:text-xs peer-focus:text-red-500 dark:peer-focus:text-red-400 peer-focus:font-bold peer-focus:uppercase peer-focus:tracking-wider transition-all duration-200"
                              >
                                Event Location *
                              </label>
                              <MapPin className="absolute right-5 top-6 transform text-gray-400 dark:text-gray-500 w-5 h-5" />
                            </div>
                          </div>
                          {getFieldError('location', 2) && (
                            <div className="flex items-center gap-2 p-2 px-6 bg-red-50 dark:bg-red-900/20 border-t border-red-100 dark:border-red-800">
                              <AlertCircle className="w-4 h-4 text-red-500 flex-shrink-0" />
                              <span className="text-sm text-red-600 dark:text-red-400">{getFieldError('location', 2)}</span>
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                  
                  {/* Enhanced Target Audience */}
                  <div className="bg-gradient-to-br from-red-50 to-gray-50 dark:from-gray-800/50 dark:to-gray-900/50 rounded-2xl p-6 sm:p-8 border border-gray-100 dark:border-gray-700 shadow-inner">
                    <label className="block text-lg sm:text-xl font-bold text-gray-800 dark:text-gray-200 mb-6 text-center">Target Audience *</label>
                    <div className="max-w-2xl mx-auto">
                      <div className="bg-white dark:bg-gray-800 rounded-2xl shadow-sm border border-gray-100 dark:border-gray-700 overflow-hidden">
                        <div className="p-1">
                          <div className="relative">
                            <select
                              id="target-audience"
                              name="targetAudience"
                              value={formData.targetAudience}
                              onChange={(e) => {
                                const value = e.target.value;
                                if (value === "Other") {
                                  setIsOtherSelected(true);
                                  setFormData({ ...formData, targetAudience: "Other" });
                                } else {
                                  setIsOtherSelected(false);
                                  setCustomTargetAudience("");
                                  setFormData({ ...formData, targetAudience: value });
                                }
                              }}
                              className="w-full appearance-none px-5 sm:px-6 pt-8 pb-3 peer border-0 text-gray-700 dark:text-gray-100 transition-all duration-300 focus:outline-none focus:ring-0 font-sans text-lg bg-white dark:bg-gray-800 cursor-pointer"
                            >
                              <option value="">Select target audience</option>
                              <option value="All students">All students</option>
                              <option value="Grade 12 only">Grade 12 only</option>
                              <option value="Grade 11 only">Grade 11 only</option>
                              <option value="Grade 10 only">Grade 10 only</option>
                              <option value="Grade 9 only">Grade 9 only</option>
                              <option value="Grade 8 only">Grade 8 only</option>
                              <option value="Club members only">Club members only</option>
                              <option value="Other">Other (specify below)</option>
                            </select>
                            <label 
                              htmlFor="target-audience"
                              className="absolute top-2 left-5 sm:left-6 text-xs font-bold uppercase tracking-wider text-red-500 dark:text-red-400 transition-all duration-200"
                            >
                              Target Audience *
                            </label>
                            <div className="absolute right-5 top-6 pointer-events-none">
                              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-400 dark:text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                              </svg>
                            </div>
                          </div>
                        </div>
                        {getFieldError('targetAudience', 2) && (
                          <div className="flex items-center gap-2 p-2 px-6 bg-red-50 dark:bg-red-900/20 border-t border-red-100 dark:border-red-800">
                            <AlertCircle className="w-4 h-4 text-red-500 flex-shrink-0" />
                            <span className="text-sm text-red-600 dark:text-red-400">{getFieldError('targetAudience', 2)}</span>
                          </div>
                        )}
                      </div>
                      
                      {/* Custom Target Audience Input with Enhanced Style */}
                      {isOtherSelected && (
                        <div className="mt-4 bg-white dark:bg-gray-800 rounded-2xl shadow-sm border border-gray-100 dark:border-gray-700 overflow-hidden">
                          <div className="p-1">
                            <div className="relative">
                              <input
                                type="text"
                                id="custom-audience"
                                value={customTargetAudience}
                                onChange={(e) => {
                                  setCustomTargetAudience(e.target.value);
                                  setFormData({ ...formData, targetAudience: e.target.value });
                                }}
                                placeholder=" "
                                className="w-full px-5 sm:px-6 pt-8 pb-3 peer border-0 text-gray-700 dark:text-gray-100 transition-all duration-300 focus:outline-none focus:ring-0 font-sans text-lg bg-white dark:bg-gray-800"
                              />
                              <label 
                                htmlFor="custom-audience"
                                className="absolute top-2 left-5 sm:left-6 text-xs font-bold uppercase tracking-wider text-red-500 dark:text-red-400 peer-placeholder-shown:text-base peer-placeholder-shown:text-gray-400 dark:peer-placeholder-shown:text-gray-500 peer-placeholder-shown:top-6 peer-placeholder-shown:uppercase-none peer-placeholder-shown:tracking-normal peer-focus:top-2 peer-focus:text-xs peer-focus:text-red-500 dark:peer-focus:text-red-400 peer-focus:font-bold peer-focus:uppercase peer-focus:tracking-wider transition-all duration-200"
                              >
                                Specify Audience
                              </label>
                              <Users className="absolute right-5 top-6 transform text-gray-400 dark:text-gray-500 w-5 h-5" />
                            </div>
                          </div>
                        </div>
                      )}
                    </div>
                  </div>

                  <div className="flex flex-col sm:flex-row justify-center gap-4 sm:gap-6 pt-8 max-w-2xl mx-auto">
                    <button
                      type="button"
                      onClick={prevStep}
                      className="px-6 sm:px-8 py-3 sm:py-4 rounded-xl sm:rounded-2xl border-2 border-gray-200 dark:border-gray-700 text-gray-700 dark:text-gray-300 font-semibold transition-all duration-300 hover:border-red-300 hover:text-red-600 focus:outline-none focus:ring-4 focus:ring-red-200 dark:focus:ring-red-900 text-base relative overflow-hidden group flex-1 flex items-center justify-center"
                    >
                      <span className="flex items-center gap-2">
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 transition-transform duration-300 transform group-hover:-translate-x-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                        </svg>
                        Previous
                      </span>
                    </button>
                    <button
                      type="button"
                      onClick={nextStep}
                      disabled={!getStepValidation(2)}
                      className="px-6 sm:px-8 py-3 sm:py-4 rounded-xl sm:rounded-2xl bg-gradient-to-r from-red-500 to-red-600 text-white font-semibold shadow-xl shadow-red-500/30 transition-all duration-300 hover:from-red-600 hover:to-red-700 hover:shadow-red-500/50 hover:scale-105 focus:outline-none focus:ring-4 focus:ring-red-300 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100 disabled:shadow-none text-base relative overflow-hidden group flex-1 flex items-center justify-center"
                    >
                      <span className="relative z-10 flex items-center justify-center gap-2">
                        Next Step
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 transition-transform duration-300 transform group-hover:translate-x-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                        </svg>
                      </span>
                      <div className="absolute inset-0 h-full w-full bg-gradient-to-r from-red-600 to-red-700 transform scale-x-0 origin-left group-hover:scale-x-100 transition-transform duration-500"></div>
                    </button>
                  </div>
                </div>
              )}

              {/* Step 3: Organizer Details */}
              {currentStep === 3 && (
                <div className="space-y-10">
                  <div className="text-center relative mb-10">
                    <div className="absolute left-0 right-0 top-1/2 transform -translate-y-1/2 h-px bg-gradient-to-r from-transparent via-gray-300 dark:via-gray-600 to-transparent"></div>
                    <div className="inline-block relative px-6 py-3 bg-white dark:bg-gray-800 rounded-full shadow-sm">
                      <h2 className="text-2xl sm:text-3xl font-bold bg-gradient-to-r from-red-500 to-red-600 bg-clip-text text-transparent mb-1">Final Details</h2>
                      <p className="text-gray-600 dark:text-gray-300 text-sm sm:text-base">Tell us the final details of your event</p>
                    </div>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                    {/* Organizer Name with Floating Label */}
                    <div className="bg-white dark:bg-gray-800 rounded-2xl shadow-sm border border-gray-100 dark:border-gray-700 overflow-hidden">
                      <div className="p-1">
                        <div className="relative">
                          <input
                            type="text"
                            id="organizer-name"
                            name="organizer"
                            value={formData.organizer}
                            onChange={handleChange}
                            placeholder=" "
                            className={`w-full px-5 sm:px-6 pt-8 pb-3 peer border-0 text-gray-700 dark:text-gray-100 transition-all duration-300 focus:outline-none focus:ring-0 font-sans text-lg bg-white dark:bg-gray-800 ${
                              getFieldError('organizer', 3) ? 'text-red-500 dark:text-red-400' : ''
                            }`}
                          />
                          <label 
                            htmlFor="organizer-name"
                            className="absolute top-2 left-5 sm:left-6 text-xs font-bold uppercase tracking-wider text-red-500 dark:text-red-400 peer-placeholder-shown:text-base peer-placeholder-shown:text-gray-400 dark:peer-placeholder-shown:text-gray-500 peer-placeholder-shown:top-6 peer-placeholder-shown:uppercase-none peer-placeholder-shown:tracking-normal peer-focus:top-2 peer-focus:text-xs peer-focus:text-red-500 dark:peer-focus:text-red-400 peer-focus:font-bold peer-focus:uppercase peer-focus:tracking-wider transition-all duration-200"
                          >
                            Organizer Name *
                          </label>
                          <User className="absolute right-5 top-6 transform text-gray-400 dark:text-gray-500 w-5 h-5" />
                        </div>
                      </div>
                      {getFieldError('organizer', 3) && (
                        <div className="flex items-center gap-2 p-2 px-6 bg-red-50 dark:bg-red-900/20 border-t border-red-100 dark:border-red-800">
                          <AlertCircle className="w-4 h-4 text-red-500 flex-shrink-0" />
                          <span className="text-sm text-red-600 dark:text-red-400">{getFieldError('organizer', 3)}</span>
                        </div>
                      )}
                    </div>

                    {/* Email with Floating Label */}
                    <div className="bg-white dark:bg-gray-800 rounded-2xl shadow-sm border border-gray-100 dark:border-gray-700 overflow-hidden">
                      <div className="p-1">
                        <div className="relative">
                          <input
                            type="email"
                            id="organizer-email"
                            name="email"
                            value={formData.email}
                            onChange={handleChange}
                            placeholder=" "
                            className={`w-full px-5 sm:px-6 pt-8 pb-3 peer border-0 text-gray-700 dark:text-gray-100 transition-all duration-300 focus:outline-none focus:ring-0 font-sans text-lg bg-white dark:bg-gray-800 ${
                              getFieldError('email', 3) ? 'text-red-500 dark:text-red-400' : ''
                            }`}
                          />
                          <label 
                            htmlFor="organizer-email"
                            className="absolute top-2 left-5 sm:left-6 text-xs font-bold uppercase tracking-wider text-red-500 dark:text-red-400 peer-placeholder-shown:text-base peer-placeholder-shown:text-gray-400 dark:peer-placeholder-shown:text-gray-500 peer-placeholder-shown:top-6 peer-placeholder-shown:uppercase-none peer-placeholder-shown:tracking-normal peer-focus:top-2 peer-focus:text-xs peer-focus:text-red-500 dark:peer-focus:text-red-400 peer-focus:font-bold peer-focus:uppercase peer-focus:tracking-wider transition-all duration-200"
                          >
                            Email
                          </label>
                          <Mail className="absolute right-5 top-6 transform text-gray-400 dark:text-gray-500 w-5 h-5" />
                        </div>
                      </div>
                      {getFieldError('email', 3) && (
                        <div className="flex items-center gap-2 p-2 px-6 bg-red-50 dark:bg-red-900/20 border-t border-red-100 dark:border-red-800">
                          <AlertCircle className="w-4 h-4 text-red-500 flex-shrink-0" />
                          <span className="text-sm text-red-600 dark:text-red-400">{getFieldError('email', 3)}</span>
                        </div>
                      )}
                    </div>
                  
                  
                  {/* Notes with Enhanced Style */}
                  <div className="md:col-span-2 bg-gradient-to-br from-red-50 to-gray-50 dark:from-gray-800/50 dark:to-gray-900/50 rounded-2xl p-6 sm:p-8 border border-gray-100 dark:border-gray-700 shadow-inner">
                    <label className="block text-lg sm:text-xl font-bold text-gray-800 dark:text-gray-200 mb-6 text-center">Additional Notes</label>
                    <div className="max-w-3xl mx-auto">
                      <div className="bg-white dark:bg-gray-800 rounded-2xl shadow-sm border border-gray-100 dark:border-gray-700 overflow-hidden">
                        <div className="p-1">
                          <div className="relative">
                            <textarea
                              id="event-notes"
                              name="notes"
                              value={formData.notes}
                              onChange={handleChange}
                              rows={4}
                              placeholder=" "
                              className="w-full px-5 sm:px-6 pt-8 pb-3 peer border-0 text-gray-700 dark:text-gray-100 transition-all duration-300 focus:outline-none focus:ring-0 font-sans text-lg bg-white dark:bg-gray-800 resize-none"
                            ></textarea>
                            <label 
                              htmlFor="event-notes"
                              className="absolute top-2 left-5 sm:left-6 text-xs font-bold uppercase tracking-wider text-red-500 dark:text-red-400 peer-placeholder-shown:text-base peer-placeholder-shown:text-gray-400 dark:peer-placeholder-shown:text-gray-500 peer-placeholder-shown:top-6 peer-placeholder-shown:uppercase-none peer-placeholder-shown:tracking-normal peer-focus:top-2 peer-focus:text-xs peer-focus:text-red-500 dark:peer-focus:text-red-400 peer-focus:font-bold peer-focus:uppercase peer-focus:tracking-wider transition-all duration-200"
                            >
                              Additional Information
                            </label>
                            <FileText className="absolute right-5 top-6 transform text-gray-400 dark:text-gray-500 w-5 h-5" />
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className="flex flex-col sm:flex-row justify-center gap-4 sm:gap-6 pt-8 max-w-2xl mx-auto">
                    <button
                      type="button"
                      onClick={prevStep}
                      className="px-6 sm:px-8 py-3 sm:py-4 rounded-xl sm:rounded-2xl border-2 border-gray-200 dark:border-gray-700 text-gray-700 dark:text-gray-300 font-semibold transition-all duration-300 hover:border-red-300 hover:text-red-600 focus:outline-none focus:ring-4 focus:ring-red-200 dark:focus:ring-red-900 text-base relative overflow-hidden group flex-1 flex items-center justify-center"
                    >
                      <span className="flex items-center gap-2">
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 transition-transform duration-300 transform group-hover:-translate-x-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                        </svg>
                        Previous
                      </span>
                    </button>
                    <button
                      type="submit"
                      disabled={isSubmitting || !getStepValidation(3)}
                      className="px-6 sm:px-8 py-3 sm:py-4 rounded-xl sm:rounded-2xl bg-gradient-to-r from-red-500 to-red-600 text-white font-semibold shadow-xl shadow-red-500/30 transition-all duration-300 hover:from-red-600 hover:to-red-700 hover:shadow-red-500/50 hover:scale-105 focus:outline-none focus:ring-4 focus:ring-red-300 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100 disabled:shadow-none text-base relative overflow-hidden group flex-1 flex items-center justify-center"
                    >
                      <span className="relative z-10 flex items-center justify-center gap-2">
                        {isSubmitting ? (
                          <>
                            <div className="w-5 h-5 border-3 border-white border-t-transparent rounded-full animate-spin"></div>
                            <span>Submitting...</span>
                          </>
                        ) : (
                          <>
                            <span>Submit Event</span>
                            <Send className="w-5 h-5 transition-transform duration-300 transform group-hover:translate-x-1" />
                          </>
                        )}
                      </span>
                      <div className="absolute inset-0 h-full w-full bg-gradient-to-r from-red-600 to-red-700 transform scale-x-0 origin-left group-hover:scale-x-100 transition-transform duration-500"></div>
                    </button>
                  </div>
                </div>
              )}
            </form>
          </div>
        </div>
      </div>
      </AuthCheck>
    </>
  );
};

export default SubmitEventPage;